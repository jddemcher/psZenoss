Function Update-ZenossEventLog {
    <#
    .DESCRIPTION
    Uses the EventsRouter action to write messages to an events log using the REST API
    
    .PARAMETER evid
    Event ID of the event to close
    
    .PARAMETER message
    Parameter used to define message that gets written to the log
    
    .PARAMETER Credential
    PSCredential object for authentication
    
    .PARAMETER BaseUrl
    HTTPS URL of the Zenoss instance
    
    .EXAMPLE
     Update-ZenossEventLog -evid '0242ac11-000a-8d58-11e9-f1ga318c9015' -message "Message generated by powershell!" -apikey $apikey -BaseUrl 'https://yourinstance.saas.zenoss.com'
    #>
    
    Param (
        [Parameter(Mandatory = $true, Position = 1)]
        [string]$evid,

        [Parameter(Mandatory = $true, Position = 2)]
        [string]$message,

        [Parameter(Mandatory = $true, Position = 3)]
        [string]$apikey,

        [Parameter(Mandatory = $true, Position = 4)]
        [string]$BaseUrl

    )

    $Headers = @{ 'z-api-key' = $apikey }

    $Suffix = "/cz0/zport/dmd/evconsole_router"
    $URL = $BaseUrl + $Suffix

    $params = @{evid = $evid; message = $message }
 
    $body = @{
        action = 'EventsRouter'; 
        method = 'write_log'; 
        data   = @($params); 
        type   = 'rpc'; 
        tid    = 432
    } | ConvertTo-Json

    $Result = Invoke-WebRequest -UseBasicParsing -Uri $URL -Headers $Headers -Method Post -Body $body -ContentType "application/json"
    If ($Result.statuscode -eq '200') {
        Try {
            $Content = $Result.Content | ConvertFrom-Json
        }
        Catch {
            Throw "Empty response from web request"
        }
        $output = $Content.result
        Return $Output
    }
    else {
        Throw "REST call to $URL failed. `n Exception: $($Result.StatusCode) - $($Result.StatusDescription)"
    }
}